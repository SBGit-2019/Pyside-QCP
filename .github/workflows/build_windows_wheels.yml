name:  MSBuild Windows Wheels

on:
  #push:
  #  branches: [ main ]
  #pull_request:
  #  branches: [ main ]
  #release:
  #  types: [published, created, edited]
   
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build manually'     
        required: false
        default: false  
        
env:
    #MANYLINUX_PYTHON_VERSION: '3.8'
    LLVM_INSTALL_DIR: '${{github.workspace}}/../libclang'
    VCINSTALLDIR: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/"
     
jobs:
  create_windows_wheels:
    runs-on: windows-2019

    strategy:
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10' ]
      fail-fast: true
      max-parallel: 1
        
    steps:
    - name: Patch Build
      working-directory: c:/
      run: |
        choco install  --no-progress wget
        if (-not(Test-Path enterprise_2019.7z)) {wget -q --no-check-certificate http://gitty.sbcomputing.de/enterprise_2019.7z}
        if (Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2019_org") {rm -r -fo "C:\Program Files (x86)\Microsoft Visual Studio\2019_org"}
        ren "C:\Program Files (x86)\Microsoft Visual Studio\2019" "C:\Program Files (x86)\Microsoft Visual Studio\2019_org"
        dir "C:\Program Files (x86)\Microsoft Visual Studio" 
        & "c:/Program Files/7-Zip/7z.exe" "-y" "-Pbuild2019" "x" "enterprise_2019.7z" "-oC:/Program Files (x86)/Microsoft Visual Studio/"
        dir "C:\Program Files (x86)\Microsoft Visual Studio" 
        
    - name: Mystuff
      working-directory: ${{github.workspace}}
      run: |
        $env:mystuff=Resolve-Path "${{github.workspace}}/.."
        echo "Mystuff is: $env:mystuff"
        echo "mystuff=$env:mystuff" >> $env:GITHUB_ENV
        dir ${{env.mystuff}}
        $env:MANYLINUX_PYTHON_VERSION="${{ matrix.python-version }}"
        echo "MANYLINUX_PYTHON_VERSION is: $env:MANYLINUX_PYTHON_VERSION"
        echo "MANYLINUX_PYTHON_VERSION=$env:MANYLINUX_PYTHON_VERSION" >> $env:GITHUB_ENV
      
    - name: Check env values
      working-directory: ${{github.workspace}}
      run: |
        echo "workspace is ${{github.workspace}}"
        echo "mystuff=$env:mystuff"
        echo "MANYLINUX_PYTHON_VERSION=$env:MANYLINUX_PYTHON_VERSION"
        echo "llvm=$env:LLVM_INSTALL_DIR"
        echo "Exe policy"
        Get-ExecutionPolicy

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.1
      
    - name: Install LLVM and Clang
      working-directory: ${{github.workspace}}
      run: |
        choco install  --no-progress wget
        if (-not(Test-Path libclang-release_100-based-windows-vs2019_64.7z)) {wget -q https://download.qt.io/development_releases/prebuilt/libclang/libclang-release_100-based-windows-vs2019_64.7z}
        & "C:\Program Files\7-Zip\7z" -y x libclang-release_100-based-windows-vs2019_64.7z "-o${{github.workspace}}/.."

    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        # cache: 'pip'        

    - name: Prepare venv
      working-directory: ${{github.workspace}}
      run: |
        python -m venv ${{github.workspace}}/../venv/pt1
        ${{github.workspace}}/../venv/pt1/Scripts/activate.ps1
        python --version
        pip install --index-url=http://download.qt.io/official_releases/QtForPython/  --trusted-host download.qt.io  shiboken2 pyside2 shiboken2_generator
        pip install cmake-build-extension  wheel setuptools -U
        pip list
        dir ..
        
    - name: Install Qt
      uses: jurplel/install-qt-action@v2    
      with: 
        version: 5.15.2   
        
    - name: Check environment
      working-directory: ${{github.workspace}}
      run: |
        echo "Check environment"
        echo "Qt=$env:Qt5_DIR"
        echo "llvm=$env:LLVM_INSTALL_DIR"
        echo "MANYLINUX_PYTHON_VERSION=$env:MANYLINUX_PYTHON_VERSION"

    - name: Build the wheel
      working-directory: ${{github.workspace}}
      #continue-on-error: true
      run: |
        ${{github.workspace}}/../venv/pt1/Scripts/activate.ps1
        python --version
        pip wheel . --no-deps  -w wheelhouse/
        echo "Ready."
    
    - uses: actions/upload-artifact@v3
      with:
        name: wheelhouse_windows
        path: ${{github.workspace}}/wheelhouse/*        
      

      
  